{
    "src/autocontext.py": "The `autocontext.py` file is a Python script that identifies the relative file paths of the files that a developer needs to see from a directory while attempting to complete a user's instructions. It defines the `identify_context_files` function that takes in the `file_structure`, `summary_bundle`, `instructions`, and `model` as arguments, uses OpenAI's `chat_prompt` function to ask the user to identify the necessary files, and returns a list of file paths. The `main` function calls `identify_context_files` function with appropriate arguments and prints the returned list of file paths. The script also includes command line argument parsing and error handling.",
    "src/summarize.py": "The `summarize.py` file contains a Python script that summarizes files' contents within a directory using the OpenAI API. The `summarize_files` function reads and summarizes every file in the given directory and returns a dictionary of file paths to summaries. The `main` function takes in a directory, output file, and OpenAI model as arguments, calls the `summarize_files` function, saves the output to a `FileDataBundle`, and writes it to the specified output file. The script can be run directly from the command line with the directory, output file, and model as arguments.",
    "src/cli.py": "The `cli.py` file contains a Python script with functions to translate natural language text into terminal commands. The `translate_to_terminal_command` function makes use of OpenAI's GPT-3 model to generate the terminal command based on user input. The `process_command` function sanitizes the command and returns it as a string. The `main` function takes an input string, translates it into a terminal command, and prints the output. The translated command is also copied to the clipboard. The script can be run from the command line, with the input string passed as an argument.",
    "src/prompt.py": "The `prompt.py` script generates a string that displays the file structure of a specified directory and the contents of each file in that directory. It uses the `FileDataBundle` class to bundle the directory's files, and it takes an optional argument `ignore` to exclude a specific file from the output. The script expects two arguments: the first one is the path to the source directory, and the second one is the path to the target file where the generated prompt will be written. When run, the script writes the prompt to the target file and prints the length of the prompt when encoded for the GPT-4 language model using the TikTok API.",
    "src/lib/openai_lib.py": "This file provides two functions for working with OpenAI: `get_api_key()` and `chat_prompt()`. `get_api_key()` reads the OpenAI API key from a file, or from an environment variable. If the API key is not found, an exception is raised. `chat_prompt()` takes a system message and user messages, uses OpenAI's Chat Completion API to generate a response, and returns the response message. The default model used in this function is \"gpt-3.5-turbo\".",
    "src/lib/util.py": "The `util.py` file contains two functions. The first function, `find_files()`, returns a list of all files under a specified directory and its subdirectories. The second function, `tree_str()`, runs the tree command on the specified directory and returns the output as a string.",
    "src/lib/file_data_bundle.py": "The `FileDataBundle` class is a dictionary subclass that represents a bundle of file data where the dictionary keys are file paths and values are file contents. It has four methods: \n\n- `load(input_file)` is a static method that loads data from a JSON file and returns a new instance of `FileDataBundle`.\n- `bundle_directory(directory)` is a static method that creates a `FileDataBundle` object by reading all the files in a given directory and storing their contents in the dictionary. Binary files are displayed with their size.\n- `save(output_file)` saves the current `FileDataBundle` object as a JSON file.\n- `__str__()` method returns a string representation of the file bundle. The file paths and contents are formatted in a way that is readable."
}